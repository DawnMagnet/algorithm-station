"use strict";(self.webpackChunkalgorithm_station=self.webpackChunkalgorithm_station||[]).push([[469],{3905:function(n,t,e){e.d(t,{Zo:function(){return s},kt:function(){return m}});var r=e(7294);function l(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function o(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function u(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?o(Object(e),!0).forEach((function(t){l(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function i(n,t){if(null==n)return{};var e,r,l=function(n,t){if(null==n)return{};var e,r,l={},o=Object.keys(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||(l[e]=n[e]);return l}(n,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)e=o[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(l[e]=n[e])}return l}var a=r.createContext({}),c=function(n){var t=r.useContext(a),e=t;return n&&(e="function"==typeof n?n(t):u(u({},t),n)),e},s=function(n){var t=c(n.components);return r.createElement(a.Provider,{value:t},n.children)},p={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(n,t){var e=n.components,l=n.mdxType,o=n.originalType,a=n.parentName,s=i(n,["components","mdxType","originalType","parentName"]),f=c(e),m=l,k=f["".concat(a,".").concat(m)]||f[m]||p[m]||o;return e?r.createElement(k,u(u({ref:t},s),{},{components:e})):r.createElement(k,u({ref:t},s))}));function m(n,t){var e=arguments,l=t&&t.mdxType;if("string"==typeof n||l){var o=e.length,u=new Array(o);u[0]=f;var i={};for(var a in t)hasOwnProperty.call(t,a)&&(i[a]=t[a]);i.originalType=n,i.mdxType="string"==typeof n?n:l,u[1]=i;for(var c=2;c<o;c++)u[c]=e[c];return r.createElement.apply(null,u)}return r.createElement.apply(null,e)}f.displayName="MDXCreateElement"},3183:function(n,t,e){e.r(t),e.d(t,{frontMatter:function(){return i},contentTitle:function(){return a},metadata:function(){return c},toc:function(){return s},default:function(){return f}});var r=e(7462),l=e(3366),o=(e(7294),e(3905)),u=["components"],i={},a="No.1137 \u7b2cN\u4e2a\u6cf0\u6ce2\u90a3\u5951\u6570",c={unversionedId:"2021/8/No.1137",id:"2021/8/No.1137",title:"No.1137 \u7b2cN\u4e2a\u6cf0\u6ce2\u90a3\u5951\u6570",description:"\u6cf0\u6ce2\u90a3\u5951\u5e8f\u5217&nbsp;Tn&nbsp;\u5b9a\u4e49\u5982\u4e0b\uff1a&nbsp;",source:"@site/docs/2021/8/8-No.1137.md",sourceDirName:"2021/8",slug:"/2021/8/No.1137",permalink:"/algorithm-station/docs/2021/8/No.1137",editUrl:"https://github.com/DawnMagnet/algorithm-station/edit/main/website/docs/2021/8/8-No.1137.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u9898\u89e3\u4e3b\u9875",permalink:"/algorithm-station/docs/intro"},next:{title:"No.313 \u8d85\u7ea7\u4e11\u6570",permalink:"/algorithm-station/docs/2021/8/No.313"}},s=[],p={toc:s};function f(n){var t=n.components,e=(0,l.Z)(n,u);return(0,o.kt)("wrapper",(0,r.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"no1137-\u7b2cn\u4e2a\u6cf0\u6ce2\u90a3\u5951\u6570"},"No.1137 \u7b2cN\u4e2a\u6cf0\u6ce2\u90a3\u5951\u6570"),(0,o.kt)("p",null,"\u6cf0\u6ce2\u90a3\u5951\u5e8f\u5217\xa0T",(0,o.kt)("sub",null,"n"),"\xa0\u5b9a\u4e49\u5982\u4e0b\uff1a\xa0"),(0,o.kt)("p",null,"T",(0,o.kt)("sub",null,"0")," = 0, T",(0,o.kt)("sub",null,"1")," = 1, T",(0,o.kt)("sub",null,"2")," = 1, \u4e14\u5728 n >= 0\xa0\u7684\u6761\u4ef6\u4e0b T",(0,o.kt)("sub",null,"n+3")," = T",(0,o.kt)("sub",null,"n")," + T",(0,o.kt)("sub",null,"n+1")," + T",(0,o.kt)("sub",null,"n+2")),(0,o.kt)("p",null,"\u7ed9\u4f60\u6574\u6570\xa0",(0,o.kt)("code",null,"n"),"\uff0c\u8bf7\u8fd4\u56de\u7b2c n \u4e2a\u6cf0\u6ce2\u90a3\u5951\u6570\xa0T",(0,o.kt)("sub",null,"n "),"\u7684\u503c\u3002"),(0,o.kt)("p",null,"\xa0"),(0,o.kt)("p",null,(0,o.kt)("strong",null,"\u793a\u4f8b 1\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("strong",null,"\u8f93\u5165\uff1a"),"n = 4",(0,o.kt)("strong",null,"\u8f93\u51fa\uff1a"),"4",(0,o.kt)("strong",null,"\u89e3\u91ca\uff1a"),"T_3 = 0 + 1 + 1 = 2 T_4 = 1 + 1 + 2 = 4"),(0,o.kt)("p",null,(0,o.kt)("strong",null,"\u793a\u4f8b 2\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("strong",null,"\u8f93\u5165\uff1a"),"n = 25",(0,o.kt)("strong",null,"\u8f93\u51fa\uff1a"),"1389537"),(0,o.kt)("p",null,"\xa0"),(0,o.kt)("p",null,(0,o.kt)("strong",null,"\u63d0\u793a\uff1a")),(0,o.kt)("ul",null,(0,o.kt)("li",null,(0,o.kt)("code",null,"0 <= n <= 37")),(0,o.kt)("li",null,"\u7b54\u6848\u4fdd\u8bc1\u662f\u4e00\u4e2a 32 \u4f4d\u6574\u6570\uff0c\u5373\xa0",(0,o.kt)("code",null,"answer <= 2^31 - 1"),"\u3002")),(0,o.kt)("h1",{id:"\u601d\u8def\u5206\u6790"},"\u601d\u8def\u5206\u6790"),(0,o.kt)("p",null,"\u901a\u8fc7\u89c2\u5bdf\uff0c\u53d1\u73b0\u9898\u76ee\u8981\u6c42\u7684\u662f\u4e00\u4e2a\u6570\u5217\u7684\u548c\u3002\u800c\u4e14\u8fd9\u4e2a\u6570\u5217\u53ef\u4ee5\u901a\u8fc7\u524d\u9762\u76843\u9879\u6765\u8ba1\u7b97\u5f97\u5230\u540e\u9762\u7684\u4e00\u9879\u3002\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u7528\u6700\u7b80\u5355\u7684\u66b4\u529b\u7b97\u6cd5\u6765\u505a\u3002\n\u4e5f\u5c31\u662f\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u6570\u7ec4\uff0c\u91cc\u9762\u6709\u56fa\u5b9a\u7684\u4e09\u9879",(0,o.kt)("inlineCode",{parentName:"p"},"[0,1,1]"),"\u3002\u8fd9\u662f\u9898\u76ee\u4e2d\u7ed9\u6211\u4eec\u7684\u6761\u4ef6\uff0c\u7136\u540e\u6211\u4eec\u6839\u636e\u7ed9\u5165\u7684n\u53bb\u8ba1\u7b97\u5230\u6211\u4eec\u9700\u8981\u7684\u5730\u65b9\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u7b2c N \u4e2a\u6cf0\u6ce2\u90a3\u5951\u6570\u4e86"),(0,o.kt)("h1",{id:"rust\u4ee3\u7801"},"Rust\u4ee3\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"# struct Solution;\nimpl Solution {\n    pub fn tribonacci(n: i32) -> i32 {\n        let n = n as usize;\n        let mut v = vec![0, 1, 1];\n        let mut cur_len = 3;\n        while cur_len <= n {\n            v.push(v[cur_len - 1] + v[cur_len - 2] + v[cur_len - 3]);\n            cur_len += 1;\n        }\n        v[n]\n    }\n}\n")),(0,o.kt)("h1",{id:"\u8fd0\u884c\u6548\u679c"},"\u8fd0\u884c\u6548\u679c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust,editable"},'# fn main() {\n# pub fn tribonacci(n: i32) -> i32 {\n#    let n = n as usize;\n#    let mut v = vec![0, 1, 1];\n#    let mut cur_len = 3;\n#    while cur_len <= n {\n#        v.push(v[cur_len - 1] + v[cur_len - 2] + v[cur_len - 3]);\n#        cur_len += 1;\n#    }\n#    v[n]\n# }\nprintln!("{:?}", tribonacci(2));\n# }\n')))}f.isMDXComponent=!0}}]);