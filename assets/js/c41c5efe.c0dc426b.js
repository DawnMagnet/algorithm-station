"use strict";(self.webpackChunkalgorithm_station=self.webpackChunkalgorithm_station||[]).push([[8776],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>d});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,d=p["".concat(s,".").concat(f)]||p[f]||m[f]||a;return t?r.createElement(d,i(i({ref:n},l),{},{components:t})):r.createElement(d,i({ref:n},l))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},8177:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=t(7462),o=(t(7294),t(3905));const a={},i="Div.2 899 - ID: 1882",c={unversionedId:"codeforces/1882",id:"codeforces/1882",title:"Div.2 899 - ID: 1882",description:"\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u8d2a\u5fc3\u7684\u6c42\u53d6\u4e0d\u5230\u8be5\u4e8c\u8fdb\u5236\u4f4d\u65f6\uff0c\u5269\u4f59\u6240\u6709\u96c6\u5408\u7684\u6700\u5927\u5e76\u96c6",source:"@site/docs/codeforces/1882.md",sourceDirName:"codeforces",slug:"/codeforces/1882",permalink:"/docs/codeforces/1882",draft:!1,editUrl:"https://github.com/DawnMagnet/algorithm-station/edit/main/website/docs/codeforces/1882.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Rust \u4ee3\u7801\u6a21\u677f",permalink:"/docs/codeforces/template"},next:{title:"\u7b80\u4ecb",permalink:"/docs/rcore/summary"}},s={},u=[],l={toc:u},p="wrapper";function m(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"div2-899---id-1882"},"Div.2 899 - ID: 1882"),(0,o.kt)("h1",{id:"a-\u9898"},(0,o.kt)("a",{parentName:"h1",href:"https://codeforces.com/contest/1882/problem/A"},"A \u9898")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'fn solve() {\n    input! {\n         n: usz,\n         a: [usz; n]\n    }\n    let mut cur = 0;\n    for i in 0..n {\n        cur += 1;\n        if a[i] == cur {\n            cur += 1;\n        }\n    }\n    println!("{}", cur);\n}\n\nfn main() {\n    input! {\n         t: usize\n    }\n\n    for _ in 0..t {\n        solve();\n    }\n}\n')),(0,o.kt)("h1",{id:"b-\u9898"},(0,o.kt)("a",{parentName:"h1",href:"https://codeforces.com/contest/1882/problem/B"},"B \u9898")),(0,o.kt)("p",null,"\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u8d2a\u5fc3\u7684\u6c42\u53d6\u4e0d\u5230\u8be5\u4e8c\u8fdb\u5236\u4f4d\u65f6\uff0c\u5269\u4f59\u6240\u6709\u96c6\u5408\u7684\u6700\u5927\u5e76\u96c6"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'fn solve() {\n    input! {\n        n: usize,\n    }\n    let mut mask_k = vec![];\n    let mut hm = HashMap::new();\n    let mut cnt: u64 = 0;\n    for _ in 0..n {\n        input! {\n            x: usize,\n            p: [usize; x]\n        }\n        let mut mask = 0;\n        for item in p {\n            if !hm.contains_key(&item) {\n                hm.insert(item, cnt);\n                cnt += 1;\n            }\n            mask |= 1 << hm[&item];\n        }\n        mask_k.push(mask);\n    }\n    let mut res = 0;\n\n    for i in 0..cnt {\n        let mut cur: u64 = 0;\n        for &mask in &mask_k {\n            if ((mask >> i) & 1) == 0 {\n                cur |= mask;\n            }\n        }\n        res = res.max(cur.count_ones());\n    }\n    println!("{}", res);\n}\n\nfn main() {\n    input! {\n        t: usize\n    }\n\n    for _ in 0..t {\n        solve();\n    }\n}\n')))}m.isMDXComponent=!0}}]);