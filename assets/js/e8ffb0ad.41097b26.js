"use strict";(self.webpackChunkalgorithm_station=self.webpackChunkalgorithm_station||[]).push([[2270],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var u=r.createContext({}),c=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=c(n),f=i,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||o;return n?r.createElement(d,a(a({ref:t},s),{},{components:n})):r.createElement(d,a({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7950:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],l={},u="18\u65e5 No.539 \u6700\u5c0f\u65f6\u95f4\u5dee",c={unversionedId:"2022/1/18",id:"2022/1/18",title:"18\u65e5 No.539 \u6700\u5c0f\u65f6\u95f4\u5dee",description:"\u539f\u8d34\u5730\u5740\uff1a",source:"@site/docs/2022/1/18.md",sourceDirName:"2022/1",slug:"/2022/1/18",permalink:"/algorithm-station/docs/2022/1/18",editUrl:"https://github.com/DawnMagnet/algorithm-station/edit/main/website/docs/2022/1/18.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"17 \u65e5 No.1220 \u7edf\u8ba1\u5143\u97f3\u5b57\u6bcd\u5e8f\u5217\u7684\u6570\u76ee",permalink:"/algorithm-station/docs/2022/1/17"},next:{title:"19 \u65e5 No.539 \u6700\u5c0f\u65f6\u95f4\u5dee",permalink:"/algorithm-station/docs/2022/1/19"}},s=[],p={toc:s};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"18\u65e5-no539-\u6700\u5c0f\u65f6\u95f4\u5dee"},"18\u65e5 No.539 \u6700\u5c0f\u65f6\u95f4\u5dee"),(0,o.kt)("p",null,"\u539f\u8d34\u5730\u5740\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://dawnmagnet.github.io/algorithm-station/docs/2022/1/18"},"https://dawnmagnet.github.io/algorithm-station/docs/2022/1/18")),(0,o.kt)("p",null,'\u7ed9\u5b9a\u4e00\u4e2a 24 \u5c0f\u65f6\u5236\uff08\u5c0f\u65f6:\u5206\u949f "HH:MM"\uff09\u7684\u65f6\u95f4\u5217\u8868\uff0c\u627e\u51fa\u5217\u8868\u4e2d\u4efb\u610f\u4e24\u4e2a\u65f6\u95f4\u7684\u6700\u5c0f\u65f6\u95f4\u5dee\u5e76\u4ee5\u5206\u949f\u6570\u8868\u793a\u3002'),(0,o.kt)("p",null,"\u793a\u4f8b 1\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1atimePoints = ["23:59","00:00"]\n\u8f93\u51fa\uff1a1\n')),(0,o.kt)("p",null,"\u793a\u4f8b 2\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'\u8f93\u5165\uff1atimePoints = ["00:00","23:59","00:00"]\n\u8f93\u51fa\uff1a0\n')),(0,o.kt)("p",null,"\u63d0\u793a\uff1a"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"2 <= timePoints <= 2 * 104"),(0,o.kt)("li",{parentName:"ul"},"timePoints","[i]",' \u683c\u5f0f\u4e3a "HH:MM"')),(0,o.kt)("p",null,"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09",(0,o.kt)("br",{parentName:"p"}),"\n","\u94fe\u63a5\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode-cn.com/problems/minimum-time-difference"},"https://leetcode-cn.com/problems/minimum-time-difference"),(0,o.kt)("br",{parentName:"p"}),"\n","\u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002"),(0,o.kt)("h1",{id:"\u601d\u8def\u5206\u6790"},"\u601d\u8def\u5206\u6790"),(0,o.kt)("p",null,"\u9996\u5148\u4f7f\u7528\u4e00\u4e2a\u51fd\u6570\u5c06\u65e5\u671f\u8f6c\u5316\u6210\u6307\u5b9a\u5206\u949f\u7684\u6570\u5b57\uff0c\u7136\u540e\u5c06\u8fd9\u4e2a\u6570\u5b57\u5bf9\u5e94\u5230\u4e00\u4e2a1440(24*60)\u957f\u5ea6\u7684\u5e03\u5c14\u6570\u7ec4\u4e2d\uff0c\u7136\u540e\u53bb\u679a\u4e3e\u5e03\u5c14\u6570\u7ec4\u54ea\u91cc\u6709\u503c\u3002\u672c\u6765\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u53bb\u6392\u5e8f\uff0c\u4f46\u6570\u636e\u91cf\u592a\u5c0f\u4e86(1440)\uff0c\u6392\u5e8f\u4e5f\u6ca1\u4ec0\u4e48\u5fc5\u8981\u3002"),(0,o.kt)("p",null,"\u653e\u5230\u6570\u7ec4\u91cc\u9762\u4e4b\u540e\uff0c\u56e0\u4e3a\u6709\u4e24\u79cd\u53ef\u80fd\uff0c\u4e00\u79cd\u662f\u4e24\u4e2a\u6709\u6548\u503c\u4e4b\u95f4\u7684\u95f4\u9694\uff0c\u4e00\u79cd\u662f\u7b2c\u4e00\u4e2a\u503c\u548c\u6700\u540e\u4e00\u4e2a\u503c\u7684\u95f4\u9694\u3002\u6240\u4ee5\u5728\u5224\u65ad\u7684\u65f6\u5019\u9700\u8981\u591a\u52a0\u6ce8\u610f"),(0,o.kt)("h1",{id:"rust\u4ee3\u7801"},"Rust\u4ee3\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"pub fn parse(s: &str) -> usize {\n    let mut res = 0;\n    let b: Vec<usize> = s.as_bytes().iter().map(|&x| x as usize - 48).collect();\n    (b[0] * 10 + b[1]) * 60 + b[3] * 10 + b[4]\n}\nimpl Solution {\n    pub fn find_min_difference(time_points: Vec<String>) -> i32 {\n        let mut c = [false; 1440];\n        for item in &time_points {\n            let pos = parse(item);\n            if c[pos] {\n                return 0; \n            } else {\n                c[parse(item)] = true;\n            }\n        }\n        let mut cur = usize::MAX;\n        let mut res = 10000;\n        let mut first = 0;\n        for time in 0..1440 {\n            if c[time] {\n                if cur == usize::MAX {\n                    cur = time;\n                    first = time + 1440;\n                } else {\n                    res = res.min(time - cur);\n                    cur = time;\n                }\n            }\n        }\n        res = res.min(first - cur);\n        res as i32\n    }\n}\n")))}m.isMDXComponent=!0}}]);