"use strict";(self.webpackChunkalgorithm_station=self.webpackChunkalgorithm_station||[]).push([[1805],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(n),d=l,m=p["".concat(c,".").concat(d)]||p[d]||k[d]||o;return n?r.createElement(m,a(a({ref:t},s),{},{components:n})):r.createElement(m,a({ref:t},s))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:l,a[1]=i;for(var u=2;u<o;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2079:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>k,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(7462),l=(n(7294),n(3905));const o={},a="No.482 \u5bc6\u94a5\u683c\u5f0f\u5316",i={unversionedId:"leetcode/2021/10/4",id:"leetcode/2021/10/4",title:"No.482 \u5bc6\u94a5\u683c\u5f0f\u5316",description:"\u6709\u4e00\u4e2a\u5bc6\u94a5\u5b57\u7b26\u4e32 S \uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u6570\u5b57\u4ee5\u53ca '-'\uff08\u7834\u6298\u53f7\uff09\u3002\u5176\u4e2d\uff0c N \u4e2a '-' \u5c06\u5b57\u7b26\u4e32\u5206\u6210\u4e86 N+1 \u7ec4\u3002",source:"@site/docs/leetcode/2021/10/4.md",sourceDirName:"leetcode/2021/10",slug:"/leetcode/2021/10/4",permalink:"/docs/leetcode/2021/10/4",draft:!1,editUrl:"https://github.com/DawnMagnet/algorithm-station/edit/main/website/docs/leetcode/2021/10/4.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"No.166 \u5206\u6570\u5230\u5c0f\u6570",permalink:"/docs/leetcode/2021/10/3"},next:{title:"No.284 \u7aa5\u63a2\u8fed\u4ee3\u5668",permalink:"/docs/leetcode/2021/10/5"}},c={},u=[],s={toc:u},p="wrapper";function k(e){let{components:t,...n}=e;return(0,l.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"no482-\u5bc6\u94a5\u683c\u5f0f\u5316"},"No.482 \u5bc6\u94a5\u683c\u5f0f\u5316"),(0,l.kt)("p",null,"\u6709\u4e00\u4e2a\u5bc6\u94a5\u5b57\u7b26\u4e32 S \uff0c\u53ea\u5305\u542b\u5b57\u6bcd\uff0c\u6570\u5b57\u4ee5\u53ca '-'\uff08\u7834\u6298\u53f7\uff09\u3002\u5176\u4e2d\uff0c N \u4e2a '-' \u5c06\u5b57\u7b26\u4e32\u5206\u6210\u4e86 N+1 \u7ec4\u3002"),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u6570\u5b57 K\uff0c\u8bf7\u4f60\u91cd\u65b0\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5206\u7ec4\u6070\u597d\u5305\u542b K \u4e2a\u5b57\u7b26\u3002\u7279\u522b\u5730\uff0c\u7b2c\u4e00\u4e2a\u5206\u7ec4\u5305\u542b\u7684\u5b57\u7b26\u4e2a\u6570\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e K\uff0c\u4f46\u81f3\u5c11\u8981\u5305\u542b 1 \u4e2a\u5b57\u7b26\u3002\u4e24\u4e2a\u5206\u7ec4\u4e4b\u95f4\u9700\u8981\u7528 '-'\uff08\u7834\u6298\u53f7\uff09\u9694\u5f00\uff0c\u5e76\u4e14\u5c06\u6240\u6709\u7684\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u5b57\u6bcd\u3002"),(0,l.kt)("p",null,"\u7ed9\u5b9a\u975e\u7a7a\u5b57\u7b26\u4e32 S \u548c\u6570\u5b57 K\uff0c\u6309\u7167\u4e0a\u9762\u63cf\u8ff0\u7684\u89c4\u5219\u8fdb\u884c\u683c\u5f0f\u5316\u3002"),(0,l.kt)("p",null,"\xa0"),(0,l.kt)("p",null,(0,l.kt)("strong",null,"\u793a\u4f8b 1\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("strong",null,"\u8f93\u5165\uff1a"),'S = "5F3Z-2e-9-w", K = 4',(0,l.kt)("strong",null,"\u8f93\u51fa\uff1a"),'"5F3Z-2E9W"',(0,l.kt)("strong",null,"\u89e3\u91ca\uff1a"),"\u5b57\u7b26\u4e32 S \u88ab\u5206\u6210\u4e86\u4e24\u4e2a\u90e8\u5206\uff0c\u6bcf\u90e8\u5206 4 \u4e2a\u5b57\u7b26\uff1b \xa0    \u6ce8\u610f\uff0c\u4e24\u4e2a\u989d\u5916\u7684\u7834\u6298\u53f7\u9700\u8981\u5220\u6389\u3002"),(0,l.kt)("p",null,(0,l.kt)("strong",null,"\u793a\u4f8b 2\uff1a")),(0,l.kt)("pre",null,(0,l.kt)("strong",null,"\u8f93\u5165\uff1a"),'S = "2-5g-3-J", K = 2',(0,l.kt)("strong",null,"\u8f93\u51fa\uff1a"),'"2-5G-3J"',(0,l.kt)("strong",null,"\u89e3\u91ca\uff1a"),"\u5b57\u7b26\u4e32 S \u88ab\u5206\u6210\u4e86 3 \u4e2a\u90e8\u5206\uff0c\u6309\u7167\u524d\u9762\u7684\u89c4\u5219\u63cf\u8ff0\uff0c\u7b2c\u4e00\u90e8\u5206\u7684\u5b57\u7b26\u53ef\u4ee5\u5c11\u4e8e\u7ed9\u5b9a\u7684\u6570\u91cf\uff0c\u5176\u4f59\u90e8\u5206\u7686\u4e3a 2 \u4e2a\u5b57\u7b26\u3002"),(0,l.kt)("p",null,"\xa0"),(0,l.kt)("p",null,(0,l.kt)("strong",null,"\u63d0\u793a:")),(0,l.kt)("ol",null,(0,l.kt)("li",null,"S \u7684\u957f\u5ea6\u53ef\u80fd\u5f88\u957f\uff0c\u8bf7\u6309\u9700\u5206\u914d\u5927\u5c0f\u3002K \u4e3a\u6b63\u6574\u6570\u3002"),(0,l.kt)("li",null,"S \u53ea\u5305\u542b\u5b57\u6bcd\u6570\u5b57\uff08a-z\uff0cA-Z\uff0c0-9\uff09\u4ee5\u53ca\u7834\u6298\u53f7'-'"),(0,l.kt)("li",null,"S \u975e\u7a7a")),(0,l.kt)("p",null,"\xa0"),(0,l.kt)("h1",{id:"\u601d\u8def\u5206\u6790"},"\u601d\u8def\u5206\u6790"),(0,l.kt)("p",null,"\u6839\u636e\u9898\u76ee\u7684\u601d\u8def\u53ef\u77e5\uff0c\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u4e0b\u5212\u7ebf\u5bf9\u672c\u9898\u6ca1\u4ec0\u4e48\u7528\uff0c\u6240\u4ee5\u7edf\u8ba1\u7684\u65f6\u5019\u53bb\u6389\u3002"),(0,l.kt)("p",null,"\u9996\u5148\u8ba1\u7b97\u6bcf\u4e2a\u90e8\u5206\u53ef\u4ee5\u5206\u5230\u591a\u5c11\u4e2a\u5b57\u7b26\uff0c\u4e5f\u5c31\u662fparts\u53d8\u91cf\u3002\u7136\u540e\u8ba1\u7b97\u7b2c\u4e00\u4e2a\u533a\u5757\u4e2d\u6709\u591a\u5c11\u4e2a\u5b57\u7b26\uff0c\u4e5f\u5c31\u662fremains\u3002\u5982\u679c\u53ef\u4ee5\u6574\u9664\uff0c\u7b2c\u4e00\u4e2a\u533a\u5757\u4e2d\u5c31\u6709k\u4e2a\u5b57\u7b26\uff0c\u5982\u679c\u4e0d\u80fd\u6574\u9664\uff0c\u7b2c\u4e00\u4e2a\u533a\u5757\u4e2d\u7684\u4e2a\u6570\u4f1a\u5c0f\u4e8ek\u4e2a\uff0c\u4e5f\u5c31\u662f",(0,l.kt)("inlineCode",{parentName:"p"},"valid(\u5408\u6cd5\u5b57\u7b26) / k"),"\u3002"),(0,l.kt)("p",null,"\u5728\u8ba1\u7b97\u5b8c\u6210\u540e\uff0c\u5c31\u53ef\u4ee5\u5c06\u539f\u5b57\u7b26\u4e32\u4e2d\u7684\u5b57\u7b26\u586b\u5145\u8fdb\u53bb\u3002\u6ce8\u610f\uff1a\u5728\u586b\u5145\u5b8c\u6210remains\u4e2a\u4e4b\u540e\u5c31\u586b\u5165\u4e00\u4e2a\u4e0b\u5212\u7ebf\uff0c\u5e76\u4e14\u5c06remains\u91cd\u7f6e\u6210k\uff0c\u56e0\u4e3a\u5f80\u540e\u7684\u6bcf\u4e00\u4e2a\u533a\u5757\u4e4b\u5185\u90fd\u6709k\u4e2a\u5b57\u7b26\u3002"),(0,l.kt)("h1",{id:"rust\u4ee3\u7801"},"Rust\u4ee3\u7801"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-rust"},"# struct Solution;\nimpl Solution {\n    pub fn license_key_formatting(s: String, k: i32) -> String {\n        let k = k as usize;\n        let n = s.len();\n        let count = s.chars().fold(0, |acc, x| acc + (x == '-') as usize);\n        let valid = n - count;\n        let parts = valid / k + (valid % k > 0) as usize;\n        let mut remains = if valid % k == 0 {k} else {valid % k};\n        let mut res = \"\".to_string();\n        for ch in s.chars() {\n            if ch == '-' {\n                continue;\n            }\n            if remains == 0 {\n                res.push('-');\n                remains = k;\n            }\n            res.push(ch.to_ascii_uppercase());\n            remains -= 1;\n        }\n        res\n    }\n}\n")))}k.isMDXComponent=!0}}]);