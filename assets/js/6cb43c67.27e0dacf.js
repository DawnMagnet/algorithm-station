"use strict";(self.webpackChunkalgorithm_station=self.webpackChunkalgorithm_station||[]).push([[917],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var l=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,r=function(e,n){if(null==e)return{};var t,l,r={},u=Object.keys(e);for(l=0;l<u.length;l++)t=u[l],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(e);for(l=0;l<u.length;l++)t=u[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=l.createContext({}),s=function(e){var n=l.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return l.createElement(p.Provider,{value:n},e.children)},a="mdxType",k={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},d=l.forwardRef((function(e,n){var t=e.components,r=e.mdxType,u=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),a=s(t),d=r,f=a["".concat(p,".").concat(d)]||a[d]||k[d]||u;return t?l.createElement(f,o(o({ref:n},c),{},{components:t})):l.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var u=t.length,o=new Array(u);o[0]=d;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[a]="string"==typeof e?e:r,o[1]=i;for(var s=2;s<u;s++)o[s]=t[s];return l.createElement.apply(null,o)}return l.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2386:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>k,frontMatter:()=>u,metadata:()=>i,toc:()=>s});var l=t(7462),r=(t(7294),t(3905));const u={},o="No.1583 \u7edf\u8ba1\u4e0d\u5f00\u5fc3\u7684\u670b\u53cb",i={unversionedId:"leetcode/2021/8/14",id:"leetcode/2021/8/14",title:"No.1583 \u7edf\u8ba1\u4e0d\u5f00\u5fc3\u7684\u670b\u53cb",description:"\u7ed9\u4f60\u4e00\u4efd n \u4f4d\u670b\u53cb\u7684\u4eb2\u8fd1\u7a0b\u5ea6\u5217\u8868\uff0c\u5176\u4e2d n \u603b\u662f \u5076\u6570 \u3002",source:"@site/docs/leetcode/2021/8/14.md",sourceDirName:"leetcode/2021/8",slug:"/leetcode/2021/8/14",permalink:"/docs/leetcode/2021/8/14",draft:!1,editUrl:"https://github.com/DawnMagnet/algorithm-station/edit/main/website/docs/leetcode/2021/8/14.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"No.233 \u6570\u5b571\u7684\u4e2a\u6570",permalink:"/docs/leetcode/2021/8/13"},next:{title:"No.313 \u8d85\u7ea7\u4e11\u6570",permalink:"/docs/leetcode/2021/8/9"}},p={},s=[],c={toc:s},a="wrapper";function k(e){let{components:n,...t}=e;return(0,r.kt)(a,(0,l.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"no1583-\u7edf\u8ba1\u4e0d\u5f00\u5fc3\u7684\u670b\u53cb"},"No.1583 \u7edf\u8ba1\u4e0d\u5f00\u5fc3\u7684\u670b\u53cb"),(0,r.kt)("p",null,"\u7ed9\u4f60\u4e00\u4efd ",(0,r.kt)("code",null,"n")," \u4f4d\u670b\u53cb\u7684\u4eb2\u8fd1\u7a0b\u5ea6\u5217\u8868\uff0c\u5176\u4e2d ",(0,r.kt)("code",null,"n")," \u603b\u662f ",(0,r.kt)("strong",null,"\u5076\u6570")," \u3002"),(0,r.kt)("p",null,"\u5bf9\u6bcf\u4f4d\u670b\u53cb ",(0,r.kt)("code",null,"i"),"\uff0c",(0,r.kt)("code",null,"preferences[i]")," \u5305\u542b\u4e00\u4efd ",(0,r.kt)("strong",null,"\u6309\u4eb2\u8fd1\u7a0b\u5ea6\u4ece\u9ad8"),(0,r.kt)("strong",null,"\u5230\u4f4e\u6392\u5217")," \u7684\u670b\u53cb\u5217\u8868\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u6392\u5728\u5217\u8868\u524d\u9762\u7684\u670b\u53cb\u4e0e ",(0,r.kt)("code",null,"i")," \u7684\u4eb2\u8fd1\u7a0b\u5ea6\u6bd4\u6392\u5728\u5217\u8868\u540e\u9762\u7684\u670b\u53cb\u66f4\u9ad8\u3002\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u670b\u53cb\u5747\u4ee5 ",(0,r.kt)("code",null,"0")," \u5230 ",(0,r.kt)("code",null,"n-1")," \u4e4b\u95f4\u7684\u6574\u6570\u8868\u793a\u3002"),(0,r.kt)("p",null,"\u6240\u6709\u7684\u670b\u53cb\u88ab\u5206\u6210\u51e0\u5bf9\uff0c\u914d\u5bf9\u60c5\u51b5\u4ee5\u5217\u8868 ",(0,r.kt)("code",null,"pairs")," \u7ed9\u51fa\uff0c\u5176\u4e2d ",(0,r.kt)("code",null,"pairs[i] = [x",(0,r.kt)("sub",null,"i"),", y",(0,r.kt)("sub",null,"i"),"]")," \u8868\u793a ",(0,r.kt)("code",null,"x",(0,r.kt)("sub",null,"i"))," \u4e0e ",(0,r.kt)("code",null,"y",(0,r.kt)("sub",null,"i"))," \u914d\u5bf9\uff0c\u4e14 ",(0,r.kt)("code",null,"y",(0,r.kt)("sub",null,"i"))," \u4e0e ",(0,r.kt)("code",null,"x",(0,r.kt)("sub",null,"i"))," \u914d\u5bf9\u3002"),(0,r.kt)("p",null,"\u4f46\u662f\uff0c\u8fd9\u6837\u7684\u914d\u5bf9\u60c5\u51b5\u53ef\u80fd\u4f1a\u662f\u5176\u4e2d\u90e8\u5206\u670b\u53cb\u611f\u5230\u4e0d\u5f00\u5fc3\u3002\u5728 ",(0,r.kt)("code",null,"x")," \u4e0e ",(0,r.kt)("code",null,"y")," \u914d\u5bf9\u4e14 ",(0,r.kt)("code",null,"u")," \u4e0e ",(0,r.kt)("code",null,"v")," \u914d\u5bf9\u7684\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u540c\u65f6\u6ee1\u8db3\u4e0b\u8ff0\u4e24\u4e2a\u6761\u4ef6\uff0c",(0,r.kt)("code",null,"x")," \u5c31\u4f1a\u4e0d\u5f00\u5fc3\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"x")," \u4e0e ",(0,r.kt)("code",null,"u")," \u7684\u4eb2\u8fd1\u7a0b\u5ea6\u80dc\u8fc7 ",(0,r.kt)("code",null,"x")," \u4e0e ",(0,r.kt)("code",null,"y"),"\uff0c\u4e14"),(0,r.kt)("li",null,(0,r.kt)("code",null,"u")," \u4e0e ",(0,r.kt)("code",null,"x")," \u7684\u4eb2\u8fd1\u7a0b\u5ea6\u80dc\u8fc7 ",(0,r.kt)("code",null,"u")," \u4e0e ",(0,r.kt)("code",null,"v"))),(0,r.kt)("p",null,"\u8fd4\u56de ",(0,r.kt)("strong",null,"\u4e0d\u5f00\u5fc3\u7684\u670b\u53cb\u7684\u6570\u76ee")," \u3002"),(0,r.kt)("p",null,"\xa0"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"\u793a\u4f8b 1\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("strong",null,"\u8f93\u5165\uff1a"),"n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]",(0,r.kt)("strong",null,"\u8f93\u51fa\uff1a"),"2",(0,r.kt)("strong",null,"\u89e3\u91ca\uff1a"),"\u670b\u53cb 1 \u4e0d\u5f00\u5fc3\uff0c\u56e0\u4e3a\uff1a - ",(0,r.kt)("strong",null,"1 \u4e0e 0 "),"\u914d\u5bf9\uff0c\u4f46 ",(0,r.kt)("strong",null,"1 \u4e0e 3")," \u7684\u4eb2\u8fd1\u7a0b\u5ea6\u6bd4 ",(0,r.kt)("strong",null,"1 \u4e0e 0")," \u9ad8\uff0c\u4e14 - ",(0,r.kt)("strong",null,"3 \u4e0e 1")," \u7684\u4eb2\u8fd1\u7a0b\u5ea6\u6bd4 ",(0,r.kt)("strong",null,"3 \u4e0e 2")," \u9ad8\u3002 \u670b\u53cb 3 \u4e0d\u5f00\u5fc3\uff0c\u56e0\u4e3a\uff1a - 3 \u4e0e 2 \u914d\u5bf9\uff0c\u4f46 ",(0,r.kt)("strong",null,"3 \u4e0e 1")," \u7684\u4eb2\u8fd1\u7a0b\u5ea6\u6bd4 ",(0,r.kt)("strong",null,"3 \u4e0e 2")," \u9ad8\uff0c\u4e14 - ",(0,r.kt)("strong",null,"1 \u4e0e 3")," \u7684\u4eb2\u8fd1\u7a0b\u5ea6\u6bd4 ",(0,r.kt)("strong",null,"1 \u4e0e 0")," \u9ad8\u3002 \u670b\u53cb 0 \u548c 2 \u90fd\u662f\u5f00\u5fc3\u7684\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"\u793a\u4f8b 2\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("strong",null,"\u8f93\u5165\uff1a"),"n = 2, preferences = [[1], [0]], pairs = [[1, 0]]",(0,r.kt)("strong",null,"\u8f93\u51fa\uff1a"),"0",(0,r.kt)("strong",null,"\u89e3\u91ca\uff1a"),"\u670b\u53cb 0 \u548c 1 \u90fd\u5f00\u5fc3\u3002"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"\u793a\u4f8b 3\uff1a")),(0,r.kt)("pre",null,(0,r.kt)("strong",null,"\u8f93\u5165\uff1a"),"n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]",(0,r.kt)("strong",null,"\u8f93\u51fa\uff1a"),"4"),(0,r.kt)("p",null,"\xa0"),(0,r.kt)("p",null,(0,r.kt)("strong",null,"\u63d0\u793a\uff1a")),(0,r.kt)("ul",null,(0,r.kt)("li",null,(0,r.kt)("code",null,"2 <= n <= 500")),(0,r.kt)("li",null,(0,r.kt)("code",null,"n")," \u662f\u5076\u6570"),(0,r.kt)("li",null,(0,r.kt)("code",null,"preferences.length\xa0== n")),(0,r.kt)("li",null,(0,r.kt)("code",null,"preferences[i].length\xa0== n - 1")),(0,r.kt)("li",null,(0,r.kt)("code",null,"0 <= preferences[i][j] <= n - 1")),(0,r.kt)("li",null,(0,r.kt)("code",null,"preferences[i]")," \u4e0d\u5305\u542b ",(0,r.kt)("code",null,"i")),(0,r.kt)("li",null,(0,r.kt)("code",null,"preferences[i]")," \u4e2d\u7684\u6240\u6709\u503c\u90fd\u662f\u72ec\u4e00\u65e0\u4e8c\u7684"),(0,r.kt)("li",null,(0,r.kt)("code",null,"pairs.length\xa0== n/2")),(0,r.kt)("li",null,(0,r.kt)("code",null,"pairs[i].length\xa0== 2")),(0,r.kt)("li",null,(0,r.kt)("code",null,"x",(0,r.kt)("sub",null,"i")," != y",(0,r.kt)("sub",null,"i"))),(0,r.kt)("li",null,(0,r.kt)("code",null,"0 <= x",(0,r.kt)("sub",null,"i"),", y",(0,r.kt)("sub",null,"i"),"\xa0<= n - 1")),(0,r.kt)("li",null,"\u6bcf\u4f4d\u670b\u53cb\u90fd ",(0,r.kt)("strong",null,"\u6070\u597d")," \u88ab\u5305\u542b\u5728\u4e00\u5bf9\u4e2d")),(0,r.kt)("h1",{id:"\u601d\u8def\u5206\u6790"},"\u601d\u8def\u5206\u6790"),(0,r.kt)("p",null,"\u9996\u5148\u6211\u4eec\u8981\u5bf9\u7ed9\u5165\u7684\u6570\u636e\u505a\u4e00\u4e2a\u9884\u5904\u7406\uff0c\u56e0\u4e3a\u6211\u4eec\u5728\u67e5\u8be2\u4eb2\u8fd1\u7a0b\u5ea6\u7684\u65f6\u5019\u4e00\u5b9a\u662f\u5e0c\u671b\u7ed9\u8fdb\u4e24\u4e2a\u4eba\uff0c\u7ed9\u51fa\u4e00\u4e2a\u4eb2\u8fd1\u7a0b\u5ea6\u7684\u6307\u6570\u3002\u800c\u9898\u76ee\u7ed9\u6211\u4eec\u7684\u6570\u636e\u975e\u5e38\u4e0d\u76f4\u89c2\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u62ff\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u6765\u91cd\u65b0\u88c5\u4e00\u4e0b\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust,no_run,noplayground"},"# let n = 10;\n# let preferences = vec![vec![3]];\nlet n = n as usize;\nlet mut pre = vec![vec![0; n]; n];\nfor i in 0..n {\n    for j in 0..(n - 1) {\n        pre[i][preferences[i][j] as usize] = n - j - 1;\n    }\n}\n")),(0,r.kt)("p",null,"\u4ee5\u4e0a\u4ee3\u7801\u5c06",(0,r.kt)("inlineCode",{parentName:"p"},"preferences"),"\u91cd\u65b0\u6574\u5408\u81f3",(0,r.kt)("inlineCode",{parentName:"p"},"pre"),"\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5f88\u65b9\u4fbf\u7684\u901a\u8fc7",(0,r.kt)("inlineCode",{parentName:"p"},"pre[i][j]"),"\u7684\u65b9\u5f0f\u6765\u67e5\u8be2\u4e86\u3002"),(0,r.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u4e0d\u5f00\u5fc3\u7684\u793a\u4f8b\u5e76\u4e14\u5c06\u5176\u6539\u5199\u4e3a\u4ee3\u7801",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"pre[x][u] > pre[x][y] && pre[u][x] > pre[u][v]"),(0,r.kt)("br",{parentName:"p"}),"\n","\u8fd9\u4e2a\u5f0f\u5b50\u975e\u5e38\u6709\u610f\u601d\uff0c\u4e0d\u96be\u770b\u51fa\uff0c\u5728\u6ee1\u8db3\u8fd9\u4e2a\u5f0f\u5b50\u7684\u65f6\u5019\uff0c\u4e0d\u4ec5x\u4e0d\u6ee1\u610f\uff0cu\u4e5f\u4e0d\u6ee1\u610f\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","\u518d\u8fdb\u4e00\u6b65\u89c2\u5bdf\u53c8\u80fd\u53d1\u73b0\uff0c\u8fd9\u4e2a\u5f0f\u5b50\u901a\u8fc7",(0,r.kt)("inlineCode",{parentName:"p"},"x"),"\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"u"),"\u662f\u53ef\u4ee5\u5b8c\u5168\u786e\u5b9a\u7684\u3002\u6240\u4ee5\u5bf9\u4e8e",(0,r.kt)("inlineCode",{parentName:"p"},"x,y,u,v"),"\u56db\u4e2a\u53d8\u91cf\u6765\u8bf4\uff0c\u8fd9\u6837\u7684\u4e24\u4e24\u7ec4\u5408\u4e00\u5171\u6709\u56db\u5bf9\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust,no_run,noplayground"},"# let (a, b, c, d) = (0, 0, 0, 0);\n# let pre = vec![vec![3]];\n# let mut set = std::collections::HashSet::new();\nif pre[a][c] > pre[a][b] && pre[c][a] > pre[c][d] {\n    set.insert(a);\n    set.insert(c);\n}\nif pre[b][c] > pre[b][a] && pre[c][b] > pre[c][d] {\n    set.insert(b);\n    set.insert(c);\n}\nif pre[b][d] > pre[b][a] && pre[d][b] > pre[d][c] {\n    set.insert(b);\n    set.insert(d);\n}\nif pre[d][a] > pre[d][c] && pre[a][d] > pre[a][b] {\n    set.insert(d);\n    set.insert(a);\n}\n")),(0,r.kt)("p",null,"\u5176\u4e2d",(0,r.kt)("inlineCode",{parentName:"p"},"set"),"\u662f\u4e3a\u4e86\u4e0d\u91cd\u590d\u800c\u8bbe\u7f6e\u7684\u54c8\u5e0c\u96c6\u5408\u3002\uff08",(0,r.kt)("inlineCode",{parentName:"p"},"x,y,u,v"),"\u4e3a\u4e86\u65b9\u4fbf\u5199\u6210\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"a,b,c,d"),"\uff09\n\u7136\u540e\u518d\u5bf9\u54c8\u5e0c\u8868\u8fdb\u884c\u904d\u5386\u5e76\u8f93\u51fa\u5373\u53ef\u3002"),(0,r.kt)("h1",{id:"rust\u4ee3\u7801"},"Rust\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'# struct Solution;\nimpl Solution {\n    pub fn unhappy_friends(n: i32, preferences: Vec<Vec<i32>>, pairs: Vec<Vec<i32>>) -> i32 {\n        let n = n as usize;\n        let mut pre = vec![vec![0; n]; n];\n        for i in 0..n {\n            for j in 0..(n - 1) {\n                pre[i][preferences[i][j] as usize] = n - j - 1;\n            }\n        }\n        // println!("{:?}", pre);\n        use std::collections::*;\n        let mut set = HashSet::new();\n        for i in 0..pairs.len() {\n            for j in 0..pairs.len() {\n                let a = pairs[i][0] as usize;\n                let b = pairs[i][1] as usize;\n                let c = pairs[j][0] as usize;\n                let d = pairs[j][1] as usize;\n                if pre[a][c] > pre[a][b] && pre[c][a] > pre[c][d] {\n                    set.insert(a);\n                    set.insert(c);\n                }\n                if pre[b][c] > pre[b][a] && pre[c][b] > pre[c][d] {\n                    set.insert(b);\n                    set.insert(c);\n                }\n                if pre[b][d] > pre[b][a] && pre[d][b] > pre[d][c] {\n                    set.insert(b);\n                    set.insert(d);\n                }\n                if pre[d][a] > pre[d][c] && pre[a][d] > pre[a][b] {\n                    set.insert(d);\n                    set.insert(a);\n                }\n            }\n        }\n        set.len() as i32\n    }\n}\n')))}k.isMDXComponent=!0}}]);