原贴地址：[http://blog.leanote.com/post/dawnmagnet/e62245065eaa](http://blog.le
anote.com/post/dawnmagnet/e62245065eaa)
# 题目
![title](https://leanote.com/api/file/getImage?fileId=609336d6ab6441404b002122)
# 思路分析
这个题目要求我们对二进制的基本操作有一些理解和概念。
二进制中非常重要的一个概念就是异或。
异或是一个二进制操作，原理也非常简单，是一个两输入一输出的门电路，00出0，11出0
，其他都出1，所以说，加入我们有一个数字target，让它两次异或同一个数字，结果还是
target，因为11出0，就抵消了这个数字对每一位造成的影响。
在获得了这个背景小知识后，我们就非常简单了。解码无非就是去除异或的影响，怎么去
？就再异或一遍同一个数就行。
### Rust代码
```rust
impl Solution {
    pub fn decode(encoded: Vec<i32>, first: i32) -> Vec<i32> {
        let mut res = vec![first];
        for i in 0..encoded.len() {
            res.push(res[i] ^ encoded[i]);
        }
        res
    }
}
```
### C++代码
```cpp
class Solution {
public:
    vector<int> decode(vector<int>& encoded, int first) {
        vector<int> res = {first};
        for (int i = 0; i < encoded.size(); ++i)
            res.push_back(res[i] ^ encoded[i]);
        return res;
    }
};
```